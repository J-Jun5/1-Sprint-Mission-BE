// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  profileImg  String? 
  nickname    String    @unique @db.VarChar(10)
  email       String    @unique @db.VarChar(50)
  password    String    @db.VarChar(30)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  productList Product[]
  articleList Article[]
  Comment     Comment[]
}

model Product {
  id          Int      @id @default(autoincrement())
  category    String?
  productImg  String?
  productName String   @db.VarChar(10)
  description String   @db.VarChar(100)
  price       Float
  like        Int      @default(0)
  productTags String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sellerName  String?
  user        User?    @relation(fields: [sellerName], references: [nickname], onDelete: SetNull)
}

model Article {
  id           Int       @id @default(autoincrement())
  board        String    @default("") // 'market' 또는 'freeboard'
  articleImg   String?
  title        String
  content      String
  like         Int       @default(0)
  commentCount Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  authorName   String?
  user         User?     @relation(fields: [authorName], references: [nickname], onDelete: SetNull)
  comments     Comment[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  articleId  Int
  article    Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  authorName String?
  user       User?    @relation(fields: [authorName], references: [nickname], onDelete: SetNull)
}
